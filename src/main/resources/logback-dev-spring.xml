<?xml version="1.0" encoding="UTF-8"?>
<!-- 开发环境的配置，具体配置项释义可见logback-spring.xml -->
<configuration  scan="true" scanPeriod="10 seconds" debug="false">
	<property name="APP_Name" value="demo" />
	<property name="log.path" value="F:/Program Files/STS/logs/demo_dev_logs" />
	<property name="color_print" value="%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)"></property>
	<property name="print" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"></property>
	
	<contextName>${APP_Name}</contextName>
	
	<!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter： 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 过滤掉所有低于INFO级别的日志 -->
            <level>TRACE</level>
        </filter>
        <encoder>
            <Pattern>${color_print}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 自己的某个package用特有的格式 -->
	<appender name="MY_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>我自己的日志：%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>
		</encoder>
	</appender>
	
	<!-- 按照每天生成日志文件 -->   
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">   
        <!-- 每次启动都会重写这个日志文件 -->
        <file>F:/Program Files/STS/logs/start_demo.log</file>
        <!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
        <append>true</append> 
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动 -->
        <!-- 每天生成一个日志文件，保存30天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名，demo.log.2019-05-19.log,每天一个日志，如果是*-dd-HH,则是每个小时-->
            <FileNamePattern>${log.path}/demo.log.%d{yyyy-MM-dd}.log</FileNamePattern> 
            <!--日志文件保留天数,控制保留的归档文件的最大数量，超出数量就删除旧文件-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--> 
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>   
        </encoder>
        <!--日志文件最大的大小-->
       <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
         <MaxFileSize>10MB</MaxFileSize>
       </triggeringPolicy>
    </appender>
    
    <!-- 只收集ERROR，也可以设置为滚动模式 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.FileAppender">   
	  <!-- 将过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉 -->
	  <filter class="ch.qos.logback.classic.filter.LevelFilter">
	    <level>ERROR</level>
	    <onMatch>ACCEPT</onMatch>
	    <onMismatch>DENY</onMismatch>
	  </filter>
	  <encoder>
	    <pattern>
	      %-4relative [%thread] %-5level %logger{30} - %msg%n   
	    </pattern>
	  </encoder>
	  <file>${log.path}/demo_error.log</file>
	</appender>
    
    <!-- 使用不一样的输出 -->
    <logger name="com.example.controller.AllParamsController" level="INFO" additivity="false">  
		<appender-ref ref="MY_CONSOLE"/>
	</logger>
	
	<!-- Spring Boot 2.1 以后 使用了 Spring Framework 5.1, 而 Spring Framework 5.1 对日志做了较大的改动。现在使用 INFO 级别记录的信息非常少，DEBUG 级别提供了更多信息，但不详细。只有 TRACE 级别才会提供详细信息 -->
	<!-- 打印Mapping -->
	<logger name="org.springframework.web" level="TRACE" />
	
	<!-- 也是<logger>元素，但是它是根logger。只有一个level属性，已经被命名为"root" -->
	<!-- 根级别目录是info，如果是error那么将没有任何输出 -->
	<root level="info">
        <appender-ref ref="ERROR_FILE" />
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>
</configuration>